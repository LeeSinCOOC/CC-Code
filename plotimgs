# -*- coding: utf-8 -*-
"""
Created on Tue Mar 31 15:12:42 2020

@author: CC
"""
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt


def one():
    df1 = pd.read_excel('data.xlsx',sheet_name='1',header=0)
    df1 = df1.loc[:,:].astype('float32')
    print(df1.shape)
    sns.lineplot(data=df1,markers=True, ci=None)
    
    plt.xlabel('Data size(bytes)')
    plt.ylabel('Energy consumption')
    
    
    plt.grid() 
    plt.xlim((0,1000))
    plt.xticks(np.linspace(0,1000,6))
#one()



def two():
    df1 = pd.read_excel('data.xlsx',sheet_name='2',header=0)
    df1 = df1.loc[:,:].astype('float32')
    print(df1.shape)
    sns.lineplot(data=df1,markers=True, ci=None)
    
    plt.xlabel('Data size(B)')
    plt.ylabel('Processing time(ms)')
    
    
    plt.grid(1) 
    plt.xlim((0,1000))
    plt.xticks(np.linspace(0,1000,6))
#two()


def three():
    df1 = pd.read_excel('data.xlsx',sheet_name='3',header=0)
    df1 = df1.loc[:,:].astype('float32')
    print(df1.shape)
    sns.lineplot(data=df1,legend='full',markers=True, ci=None)
    
    plt.xlabel('Time(s)')
    plt.ylabel('Write(B/s)')
    
    
    plt.grid(1) 
    plt.xlim((0,220))
    plt.xticks(np.arange(0,250,50))
#three()
    
def four():
    x = [2,4,8,16]
    y = [8,12,24,49]
    
    plt.plot(x,y,marker='o',color='teal')
    plt.xlabel('No. of valldators)')
    plt.ylabel('Latency(ms)')
    
    plt.xlim((0,18))
    plt.xticks(np.linspace(0,18,7))
    plt.show()
#four()


def five():
    x = np.arange(2)
    Bj = [461, 502]
    Sh = [60, 82]
    bar_width = 0.2
    
    # 绘图 x 表示 从那里开始
    plt.bar(x, Bj, bar_width,color='c',label='4G')
    plt.bar(x+bar_width, Sh, bar_width, align="center",color='lightcoral',label='5G')
    plt.xticks((x+bar_width/2),['UAV to cloud','UAV to Blockchain'])
    plt.ylabel('Delay(ms)')
    plt.legend(loc=1)
    plt.show()
#five()

'''
data.xlsx
sheet_name='2'

	Asym-Encryption	Asym-Decryption	Sym-Encryption	Sym-Decryption	Signing	Verifying
50	10	10	9	7	8	7
150	15	12	8.2	8.1	8.2	7.1
250	19	15	9.4	7.22	8.4	7.22
350	30	17	8.4	7.37	8.4	7.37
450	45	18	8.51	8.37	8.51	7.38
550	50	19	9.52	7.41	8.52	7.41
650	60	21	8.77	8.42	8.77	7.42
750	70	24	8.88	7.45	8.88	7.45
850	80	26	9.91	8.23	8.91	7.47
950	90	30	9.2	7.52	9.2	7.52
'''
